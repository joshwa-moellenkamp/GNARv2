{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","padding","card","minWidth","border","bullet","display","margin","transform","title","fontSize","fontWeight","pos","marginBottom","challenge","pointVal","description","category","tableDiv","color","Challenge","name","points","other","this","AlertDialog","content","React","useState","open","setOpen","handleClose","Button","variant","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","CollapsibleChallengesCompleted","challenges","completed","challengeDecrement","classes","Array","from","length","style","Card","className","transitionTime","trigger","Table","tableLayout","TableHead","TableRow","TableCell","width","TableBody","map","value","button","e","get","Scoreboard","score","forEach","timesCompleted","challengeId","CollapsibleCategoryCollection","categories","challengeCompleted","i","key","CollapsibleCategory","categoryName","categoryChallengeIds","categoryKeys","bind","toLowerCase","split","s","charAt","toUpperCase","substring","join","App","props","state","localStorage","getItem","fetch","then","response","json","setItem","JSON","stringify","Map","data","parse","Object","keys","push","chall","set","dialogues","Paper","Link","href","setState","has","numTimesEarned","delete","console","warn","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.525ad617.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Collapsible from 'react-collapsible';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  padding: \"3em 3em\",\r\n  card: {\r\n    minWidth: 275,\r\n    padding: \"15px\",\r\n    border: \"1px solid #ccc\",\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  challenge: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\", \r\n  },\r\n  pointVal: {\r\n    fontSize: 16,\r\n    fontWeight: \"bolder\",\r\n    // color: \"#3483eb\",\r\n  },\r\n  description: {\r\n    fontSize: 12,\r\n    fontWeight: 400\r\n  },\r\n  category: {\r\n    fontSize: 20,\r\n    fontWeight: \"bolder\",\r\n    padding: \"0em 1em\"\r\n  },\r\n  tableDiv: {\r\n    padding: \"5em 5em\",\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\nclass Challenge {\r\n  constructor(name, points, description, other) {\r\n    this.name = name;\r\n    this.points = points;\r\n    this.description = description;\r\n    this.other = other;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if(localStorage.getItem('challenges') === null) {\r\n      await fetch('https://joshwa-moellenkamp.github.io/GNAR/source.json')\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(function(json) {\r\n        localStorage.setItem('challenges', JSON.stringify(json));\r\n      })\r\n    }\r\n\r\n    var categories = []\r\n    var challenges = new Map()\r\n    let data = JSON.parse(localStorage.getItem('challenges'))\r\n    var i = 0\r\n    Object.keys(data).forEach((category) => {\r\n      var categoryKeys = []\r\n      data[category].forEach((challenge) => {\r\n        categoryKeys.push(i)\r\n        var chall = new Challenge(challenge.name, challenge.points, challenge.description, challenge.other)\r\n        challenges.set(i, chall)\r\n        i++\r\n      })\r\n      categories.push({category, categoryKeys})\r\n    })\r\n\r\n    // This map intended to have key (from challenges), value (number of times challenge completed)\r\n    var completed = new Map()\r\n    var dialogues = new Map()\r\n    dialogues.set(\r\n      \"Background\",\r\n      \"Created by the late Shane McConkey and Dr. Robb Gaffney, \" +\r\n      \"GNAR (Gaffney's Numerical Assessment of Radness) is a response \" +\r\n      \"to the ski industry taking itself altogether too seriously. \"+\r\n      \"Earn points for riding particularly rad lines or achieving particularly \" +\r\n      \"hilarious tasks. Lose points for doing anything uncharictaristically lame. \" +\r\n      \"Losers pay for beer.\"\r\n    )\r\n    dialogues.set(\r\n      \"Links\",\r\n      <Paper>\r\n        <Link href={\"http://simplemethod.com/GNAR.pdf\"} variant=\"body2\">\r\n          Adapted GNAR Rulesheet for Vail\r\n        </Link>\r\n        <Link href={\"https://www.vail.com/the-mountain/about-the-mountain/trail-map.aspx\"} variant=\"body2\">\r\n          Vail Trailmaps\r\n        </Link>\r\n        <Link href={\"http://squallywood.com/\"} variant=\"body2\">\r\n          Squallywood\r\n        </Link>\r\n      </Paper>\r\n    )\r\n\r\n    this.setState({ challenges: challenges, categories: categories, completed: completed })\r\n    this.setState({ dialogues: dialogues })\r\n  }\r\n\r\n  challengeCompleted(key) {\r\n    var completed = this.state.completed\r\n    if(!this.state.completed.has(key)) {\r\n      completed.set(key, 1)\r\n    } else {\r\n      let numTimesEarned = completed.get(key)\r\n      completed.set(key, ++numTimesEarned)\r\n    }\r\n    this.setState(completed)\r\n  }\r\n\r\n  challengeDecrement(key) {\r\n    var completed = this.state.completed\r\n    if(!this.state.completed.has(key)) {\r\n      console.warn('Could not decrement challenge!')\r\n    } else if(this.state.completed.get(key) > 1) {\r\n      // if the value is greater than 1, decrement\r\n      let numTimesEarned = completed.get(key)\r\n      completed.set(key, --numTimesEarned)\r\n    } else {\r\n      // if the value is 1, remove the challenge\r\n      completed.delete(key)\r\n    }\r\n    this.setState(completed)\r\n  }\r\n\r\n  render () {\r\n    if(this.state.challenges != null) {\r\n      return (\r\n        <div style={{ padding: \"5% 5%\" }}>\r\n          <Scoreboard\r\n            challenges={this.state.challenges}\r\n            completed={this.state.completed}\r\n          />\r\n          <CollapsibleCategoryCollection\r\n            challenges={this.state.challenges}\r\n            categories={this.state.categories}\r\n            challengeCompleted={this.challengeCompleted.bind(this)}\r\n          />\r\n          <CollapsibleChallengesCompleted\r\n            challenges={this.state.challenges}\r\n            completed={this.state.completed}\r\n            challengeDecrement={this.challengeDecrement.bind(this)}\r\n          />\r\n          {Array.from(this.state.dialogues).map((value) => (\r\n            \r\n            <AlertDialog\r\n              title={value[0]}\r\n              content={value[1]}\r\n            />\r\n          ))}\r\n        </div>\r\n      )\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nfunction AlertDialog({ title, content }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        {title}\r\n      </Button>\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            {content}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CollapsibleChallengesCompleted({ challenges, completed, challengeDecrement }) {\r\n  const classes = useStyles();\r\n  if(Array.from(completed) === 'undefined' || Array.from(completed).length === 0) {\r\n    return (\r\n      <div style={{ padding: \"2em .1em\" }}>\r\n        <Card className={classes.card}>\r\n          <Collapsible\r\n            transitionTime={300}\r\n            trigger={\"Completed Challenges\"}\r\n            style={{ fontWeight: \"bolder\" }}\r\n          >\r\n            <h5>You haven't completed any challenges yet! Get out there for heck's sake!</h5>\r\n          </Collapsible>\r\n        </Card>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: \"2em .1em\" }}>\r\n      <Card className={classes.card}>\r\n        <Collapsible\r\n          transitionTime={300}\r\n          trigger={\"Completed Challenges\"}\r\n          style={{ fontWeight: \"bolder\" }}\r\n        >\r\n          <Table style={{ tableLayout: \"auto\" }}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell></TableCell>\r\n                <TableCell style={{ width: \"10%\" }}>Times Earned</TableCell>\r\n                <TableCell style={{ width: \"20%\" }}>Challenge</TableCell>\r\n                <TableCell style={{ width: \"10%\" }}>Points</TableCell>\r\n                <TableCell style={{ width: \"60%\" }}>Description</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {Array.from(completed).map((value) => (\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <Button \r\n                      variant=\"contained\" \r\n                      className={classes.button}\r\n                      onClick={(e) => challengeDecrement(value[0])}\r\n                    >\r\n                      {value[1] > 1 ? 'DECREMENT' : 'REMOVE'}\r\n                    </Button>\r\n                  </TableCell>\r\n                  <TableCell>{value[1]}</TableCell>\r\n                  <TableCell className={classes.challenge}>\r\n                    {challenges.get(value[0]).name}\r\n                  </TableCell>\r\n                  <TableCell className={classes.pointVal}>\r\n                    {challenges.get(value[0]).points}\r\n                  </TableCell>\r\n                  <TableCell className={classes.description}>\r\n                    {challenges.get(value[0]).description}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </Collapsible>\r\n      </Card>\r\n    </div>\r\n  );\r\n} \r\n\r\nfunction Scoreboard({ challenges, completed }) {\r\n  var score = 0\r\n  completed.forEach((timesCompleted, challengeId) => (\r\n    score += challenges.get(challengeId).points * timesCompleted\r\n  ))\r\n\r\n  return (\r\n    <h2>GNAR Value: {score}</h2>\r\n  )\r\n} \r\n\r\nfunction CollapsibleCategoryCollection({ challenges, categories, challengeCompleted }) {\r\n  const classes = useStyles();\r\n  var i = 0\r\n  return (\r\n    categories.map((category) => (\r\n      <div style={{padding: \".1em .1em\"}}>\r\n        <Card className={classes.card} key={i++}>\r\n          <CollapsibleCategory\r\n            categoryName={category.category}\r\n            categoryChallengeIds={category.categoryKeys}\r\n            challenges={challenges}\r\n            challengeCompleted={challengeCompleted.bind(this)}\r\n          />\r\n        </Card>\r\n      </div>\r\n    ))\r\n  )\r\n}\r\n\r\nfunction CollapsibleCategory({ categoryName, categoryChallengeIds, challenges, challengeCompleted }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Collapsible \r\n      transitionTime={300}\r\n      trigger={ categoryName.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ') }\r\n      style={{ fontWeight: \"bolder\" }}>\r\n      <Table style={{ tableLayout: \"auto\" }}>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell></TableCell>\r\n            <TableCell style={{ width: \"20%\" }}>Challenge</TableCell>\r\n            <TableCell style={{ width: \"10%\" }}>Points</TableCell>\r\n            <TableCell style={{ width: \"70%\" }}>Description</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {categoryChallengeIds.map((key) => (\r\n            <TableRow key={key}>\r\n              <TableCell>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className={classes.button}\r\n                  onClick={(e) => challengeCompleted(key)}\r\n                >\r\n                  COMPLETE\r\n                </Button>\r\n              </TableCell> \r\n              <TableCell className={classes.challenge}>{challenges.get(key).name}</TableCell>\r\n              <TableCell className={classes.pointVal}>{challenges.get(key).points}</TableCell>\r\n              <TableCell className={classes.description}>{challenges.get(key).description}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </Collapsible>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}