{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","padding","card","minWidth","border","bullet","display","margin","transform","title","fontSize","fontWeight","pos","marginBottom","challenge","pointVal","button","spacing","description","category","tableDiv","color","minLengthForChallengeFilter","Challenge","points","other","this","App","props","state","localStorage","getItem","fetch","then","response","json","setItem","JSON","stringify","categories","challenges","Map","data","parse","Object","keys","forEach","categoryKeys","push","name","chall","set","completed","setState","filter","key","has","numTimesEarned","get","delete","console","warn","challengesForFilter","filteredChallenges","toLowerCase","indexOf","slice","style","Scoreboard","Card","onFilter","target","value","placeholder","minLength","List","items","challengeCompleted","bind","CollapsibleCategoryCollection","CollapsibleChallengesCompleted","challengeDecrement","AlertDialog","content","Button","variant","Link","href","rel","React","Component","useState","open","setOpen","handleClose","Fragment","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","autoFocus","length","Table","tableLayout","TableHead","TableRow","TableCell","width","TableBody","map","item","GreenButton","e","classes","Array","from","transitionTime","trigger","className","RedButton","score","timesCompleted","challengeId","i","CollapsibleCategory","categoryName","categoryChallengeIds","withStyles","root","palette","getContrastText","green","backgroundColor","red","split","s","charAt","toUpperCase","substring","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d2d84fa.chunk.js","sourcesContent":["\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Collapsible from 'react-collapsible';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Link from '@material-ui/core/Link';\nimport { green, red } from '@material-ui/core/colors';\nimport { TextFilter } from 'react-text-filter';\n\nconst useStyles = makeStyles(theme => ({\n  padding: \"3em 3em\",\n  card: {\n    minWidth: 275,\n    padding: \"15px\",\n    border: \"1px solid #ccc\",\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  challenge: {\n    // fontSize: 16,\n    // fontWeight: \"bold\", \n  },\n  pointVal: {\n    // fontSize: 16,\n    // fontWeight: \"bolder\",\n    // color: \"#3483eb\",\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  description: {\n    fontSize: 12,\n    fontWeight: 400\n  },\n  category: {\n    fontSize: 20,\n    fontWeight: \"bolder\",\n    padding: \"0em 1em\"\n  },\n  tableDiv: {\n    padding: \"5em 5em\",\n    color: \"red\"\n  }\n}));\n\nconst minLengthForChallengeFilter = 3\n\nclass Challenge {\n  constructor(points, description, other) {\n    this.points = points;\n    this.description = description;\n    this.other = other;\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { }\n  }\n\n  async componentDidMount() {\n    if(localStorage.getItem('challenges') === null) {\n      await fetch('https://joshwa-moellenkamp.github.io/GNAR/source.json')\n      .then(function(response) {\n        return response.json();\n      })\n      .then(function(json) {\n        localStorage.setItem('challenges', JSON.stringify(json));\n      })\n    }\n\n    var categories = []\n    var challenges = new Map()\n    let data = JSON.parse(localStorage.getItem('challenges'))\n    Object.keys(data).forEach((category) => {\n      var categoryKeys = []\n      data[category].forEach((challenge) => {\n        categoryKeys.push(challenge.name)\n        var chall = new Challenge(challenge.points, challenge.description, challenge.other)\n        challenges.set(challenge.name, chall)\n      })\n      categories.push({category, categoryKeys})\n    })\n\n    // This map intended to have key (from challenges), value (number of times challenge completed)\n    var completed = new Map()\n    this.setState({ challenges: challenges, categories: categories, completed: completed, filter: '' })\n  }\n\n  challengeCompleted(key) {\n    var completed = this.state.completed\n    if(!this.state.completed.has(key)) {\n      completed.set(key, 1)\n    } else {\n      let numTimesEarned = completed.get(key)\n      completed.set(key, ++numTimesEarned)\n    }\n    this.setState(completed)\n  }\n\n  challengeDecrement(key) {\n    var completed = this.state.completed\n    if(!this.state.completed.has(key)) {\n      console.warn('Could not decrement challenge!')\n    } else if(this.state.completed.get(key) > 1) {\n      // if the value is greater than 1, decrement\n      let numTimesEarned = completed.get(key)\n      completed.set(key, --numTimesEarned)\n    } else {\n      // if the value is 1, remove the challenge\n      completed.delete(key)\n    }\n    this.setState(completed)\n  }\n\n  render () {\n    const challengeFilter = filter => challenge => challenge.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\n    \n    var challengesForFilter = []\n    if(this.state.challenges != null) {\n      this.state.challenges.forEach((challenge, name) => {\n        challengesForFilter.push(name)\n      })\n    }\n\n    const filteredChallenges = this.state.filter ?\n      challengesForFilter.filter(challengeFilter(this.state.filter)) :\n      challengesForFilter.slice(0)\n  \n    if(this.state.challenges == null) {\n      return null\n    }\n    \n    return (\n      <div style={{ padding: \"5% 5%\" }}>\n        <Scoreboard challenges={this.state.challenges} completed={this.state.completed}/>\n        <div style={{ padding: \"2em .1em\" }}>\n          <Card style={{ minWidth: 275, padding: \"15px\", border: \"1px solid #ccc\" }}>\n            <div>\n              <TextFilter onFilter={({target: {value: filter}}) => this.setState({filter})} placeholder=\"Search for a Challenge (min. 3 characters)\" minLength={minLengthForChallengeFilter}/>\n              <List items={filteredChallenges} challenges={this.state.challenges} challengeCompleted={this.challengeCompleted.bind(this)} filter={this.state.filter}/>\n            </div>\n          </Card>\n        </div>\n        <CollapsibleCategoryCollection\n          challenges={this.state.challenges}\n          categories={this.state.categories}\n          challengeCompleted={this.challengeCompleted.bind(this)}\n        />\n        <CollapsibleChallengesCompleted\n          challenges={this.state.challenges}\n          completed={this.state.completed}\n          challengeDecrement={this.challengeDecrement.bind(this)}\n        />\n        <AlertDialog\n          title={\"Background\"}\n          content={\n            \"GNAR (Gaffney's Numerical Assessment of Radness) is a response \" +\n            \"to the ski industry taking itself altogether too seriously. \"+\n            \"Earn points for riding particularly rad lines or achieving particularly \" +\n            \"hilarious tasks. Lose points for doing anything uncharictaristically lame. \" +\n            \"Losers pay for beer.\"\n          }\n        />\n        <Button variant=\"outlined\" color=\"primary\">\n          <Link href={\"http://simplemethod.com/GNAR.pdf\"} target=\"_blank\" rel=\"noopener\">\n            Adapted GNAR Rulesheet for Vail\n          </Link>\n        </Button>\n        <Button variant=\"outlined\" color=\"primary\">\n          <Link href={\"http://squallywood.com/\"} target=\"_blank\" rel=\"noopener\">\n            Squallywood\n          </Link>\n        </Button>\n        <Button variant=\"outlined\" color=\"primary\">\n          <Link href={\"https://www.vail.com/the-mountain/about-the-mountain/trail-map.aspx\"} target=\"_blank\" rel=\"noopener\">\n            Vail Trailmaps\n          </Link>\n        </Button>\n      </div>\n    )\n  }\n}\n\nfunction AlertDialog({ title, content }) {\n  const [open, setOpen] = React.useState(false);\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        {title}\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {content}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\nfunction List({ items, challenges, challengeCompleted, filter }) {\n  if(filter.length < minLengthForChallengeFilter) {\n    return null\n  }\n\n  return (\n    <Table style={{ tableLayout: \"auto\" }}>\n      <TableHead>\n        <TableRow>\n          <TableCell></TableCell>\n          <TableCell style={{ width: \"20%\" }}>Challenge</TableCell>\n          <TableCell style={{ width: \"10%\" }}>Points</TableCell>\n          <TableCell style={{ width: \"60%\" }}>Description</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {items.map((item) => (\n          <TableRow key={item}>\n            <TableCell>\n              <GreenButton variant=\"contained\" onClick={(e) => challengeCompleted(item)}>\n                Complete\n              </GreenButton>\n            </TableCell>\n            <TableCell>\n              {item}\n            </TableCell>\n            <TableCell>\n              {challenges.get(item).points}\n            </TableCell>\n            <TableCell>\n              {challenges.get(item).description}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  )\n}\n\nfunction CollapsibleChallengesCompleted({ challenges, completed, challengeDecrement }) {\n  const classes = useStyles();\n  if(Array.from(completed) === 'undefined' || Array.from(completed).length === 0) {\n    return (\n      <div style={{ padding: \"2em .1em\" }}>\n        <Card style={{ minWidth: 275, padding: \"15px\", border: \"1px solid #ccc\" }}>\n          <Collapsible transitionTime={300} trigger={\"Completed Challenges\"} style={{ fontWeight: \"bolder\" }}>\n            <h5>You haven't completed any challenges yet! Get out there for heck's sake!</h5>\n          </Collapsible>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div style={{ padding: \"2em .1em\" }}>\n      <Card className={classes.card}>\n        <Collapsible\n          transitionTime={300}\n          trigger={\"Completed Challenges\"}\n          style={{ fontWeight: \"bolder\" }}\n        >\n          <Table style={{ tableLayout: \"auto\" }}>\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell style={{ width: \"10%\" }}>Times Earned</TableCell>\n                <TableCell style={{ width: \"20%\" }}>Challenge</TableCell>\n                <TableCell style={{ width: \"10%\" }}>Points</TableCell>\n                <TableCell style={{ width: \"60%\" }}>Description</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {Array.from(completed).map((value) => (\n                <TableRow>\n                  <TableCell>\n                    <RedButton variant=\"contained\" className={classes.button} onClick={(e) => challengeDecrement(value[0])}>\n                      {value[1] > 1 ? 'Decrement' : 'Remove'}\n                    </RedButton>\n                  </TableCell>\n                  <TableCell>{value[1]}</TableCell>\n                  <TableCell className={classes.challenge}>\n                    {value[0]}\n                  </TableCell>\n                  <TableCell className={classes.pointVal}>\n                    {challenges.get(value[0]).points}\n                  </TableCell>\n                  <TableCell className={classes.description}>\n                    {challenges.get(value[0]).description}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Collapsible>\n      </Card>\n    </div>\n  );\n} \n\nfunction Scoreboard({ challenges, completed }) {\n  var score = 0\n  completed.forEach((timesCompleted, challengeId) => (\n    score += challenges.get(challengeId).points * timesCompleted\n  ))\n\n  return (\n    <h2>GNAR Value: {score}</h2>\n  )\n} \n\nfunction CollapsibleCategoryCollection({ challenges, categories, challengeCompleted }) {\n  const classes = useStyles();\n  var i = 0\n  return (\n    categories.map((category) => (\n      <div style={{padding: \".1em .1em\"}}>\n        <Card className={classes.card} key={i++}>\n          <CollapsibleCategory\n            categoryName={category.category}\n            categoryChallengeIds={category.categoryKeys}\n            challenges={challenges}\n            challengeCompleted={challengeCompleted.bind(this)}\n          />\n        </Card>\n      </div>\n    ))\n  )\n}\n\nconst GreenButton = withStyles(theme => ({\n  root: {\n    color: theme.palette.getContrastText(green[300]),\n    backgroundColor: green[300],\n    '&:hover': {\n      backgroundColor: green[500],\n    },\n  },\n}))(Button);\n\nconst RedButton = withStyles(theme => ({\n  root: {\n    color: theme.palette.getContrastText(red[300]),\n    backgroundColor: red[300],\n    '&:hover': {\n      backgroundColor: red[500],\n    },\n  },\n}))(Button);\n\nfunction CollapsibleCategory({ categoryName, categoryChallengeIds, challenges, challengeCompleted }) {  \n  return (\n    <Collapsible \n      transitionTime={300}\n      trigger={ categoryName.toLowerCase().split(' ').map((s) => s.charAt(0).toUpperCase() + s.substring(1)).join(' ') }\n      style={{ fontWeight: \"bolder\" }}>\n      <Table style={{ tableLayout: \"auto\" }}>\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell style={{ width: \"20%\" }}>Challenge</TableCell>\n            <TableCell style={{ width: \"10%\" }}>Points</TableCell>\n            <TableCell style={{ width: \"70%\" }}>Description</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Array.from(categoryChallengeIds).map((challenge) => (\n            <TableRow key={challenge}>\n              <TableCell>\n                <GreenButton variant=\"contained\" onClick={(e) => challengeCompleted(challenge)}>\n                  Complete\n                </GreenButton>\n              </TableCell> \n              <TableCell>{challenge}</TableCell>\n              <TableCell>{challenges.get(challenge).points}</TableCell>\n              <TableCell>{challenges.get(challenge).description}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Collapsible>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}